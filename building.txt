Everything described in this document is in a very early state, and is subject
to change. I'll confess I barely know what I'm doing with CMake, so there's
a number of limitations so far. 

The project can be built on Windows (only tested with Visual Studio 2022),
Linux (Tested with clang and gcc), and macOS (tested with clang).

There are three external libraries, but most are optional.

SDL 2.0.10 - Required (I want to eventually get the Win32 backend up to spec.)
OpenAL (OpenAL Soft implementation preferred) - Required
FluidSynth - Optional, FLuidLite will be used if not provided. 

There are two Graphics/Input and Audio backends available on Windows. If these
libraries are not present, a native Windows backend provided by dpJudas will be
used. This isn't fully featured at the moment, but I try to keep it compilable.
Only the SDL and OpenAL backends are available on Linux right now.

-------------------------------------------------------------------------------
Building on Windows
-------------------------------------------------------------------------------
Here's a step by step outline to building on Windows with CMake-gui. I don't 
know enough about the CLI version to give instructions there, sorry.

1. Point the "Where is the source code" directory at the root Neptune Engine 
directory, and point the "Where to build the binaries" file field at a provided
build directory. You can do a /build/ subdirectory in the root Neptune Engine
directory, and it will be properly .gitignored. 

2. Click Generate, and set the generator to a Visual Studio project. Currently,
only building with 2022 is tested, I can't comment on earlier versions working.

3. Click Finish, and wait for the configuration to complete. When it does,
you'll see a number of red fields. Since the library detection code is 
currently spotty, you'll probably need to fill out the fields manually.
Provide the library and include directories for which libraries you wish to 
build with. 

4. When these libraries are filled out, click Configure again to update these
values, and then click Generate to make the project files.

5. Open up the generated solution file in Visual Studio, and then build the
projects as desired. 

-------------------------------------------------------------------------------
Building on Linux
-------------------------------------------------------------------------------
Due to the large amount of variances in Linux installations, I can't give a
detailed set of instructions, but here's the basic idea:

-Install desired libraries. All of them should be available through your
current package manager

-Navigate to the source directory and run cmake with a desired build directory
  Unlike the Windows code ATM, the library detection code should find
  the three libraries without any issue, at least they do on my machine
  
-Navigate to the build directory and run make. Assuming everything goes well,
this should produce NeptuneEngine.

-------------------------------------------------------------------------------
Building on macOS
-------------------------------------------------------------------------------
Note: This is entirely untested in Neptune Engine. I got access to an old mac
recently so I'd like to ensure this works. 

Installing the libraries depends on which package manager you want to use. For
the purposes of these instructions, I'll assume that's Homebrew.

-Install the libraries and tools for building Neptune Engine:
    brew install sdl2 openal-soft readline fluid-synth dylibbundler

-Navigate to the source directory and run cmake with a desired build directory.
  NOTE: Cmake does not successfully find the SDL include directory, OpenAL
  include directory, or the OpenAL library, so these need to be passed to the
  cmake call.  For example:
  cmake . -DOPENAL_INCLUDE_DIRS=/usr/local/Cellar/openal-soft/1.21.1/include/ \
  -DOPENAL_LIBRARIES=/usr/local/Cellar/openal-soft/1.21.1/lib/libopenal.dylib \
  -DSDL2_INCLUDE_DIRS=/usr/local/Cellar/sdl2/2.0.14_1/include/SDL2/

-Navigate to the build directory and run make. Assuming everything goes well,
this should produce NeptuneEngine.